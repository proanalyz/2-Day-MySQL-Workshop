Category,Question_Number,Question,Answer
Basic SQL Concepts,1,What is SQL?,"SQL (Structured Query Language) is a standardized programming language specifically designed for managing and manipulating relational databases. It allows users to create, retrieve, update, and delete data within a database efficiently."
Basic SQL Concepts,2,What is a database?,"A database is an organized collection of structured data stored electronically in a computer system. It allows for efficient storage, retrieval, and management of data."
Basic SQL Concepts,3,What are the different types of SQL commands?,"SQL commands are categorized into: DDL (Data Definition Language) - CREATE, ALTER, DROP; DML (Data Manipulation Language) - SELECT, INSERT, UPDATE, DELETE; DCL (Data Control Language) - GRANT, REVOKE; TCL (Transaction Control Language) - COMMIT, ROLLBACK, SAVEPOINT"
Basic SQL Concepts,4,What is the difference between DBMS and RDBMS?,"DBMS (Database Management System) is general software that handles creation, storage, and management of databases. RDBMS (Relational Database Management System) is a type of DBMS that stores data in tables with relationships between them, following relational model principles."
Basic SQL Concepts,5,What are the differences between SQL and NoSQL databases?,"SQL databases are relational, use structured schemas, support ACID properties, and use SQL for queries. NoSQL databases are non-relational, have flexible schemas, may sacrifice some ACID properties for performance, and use various query languages."
Data Types and Constraints,1,What are SQL constraints?,"SQL constraints define rules for data in tables to ensure data integrity. Common constraints include: PRIMARY KEY (unique identifier), FOREIGN KEY (referential integrity), UNIQUE (ensures uniqueness), NOT NULL (prevents null values), CHECK (defines conditions), DEFAULT (sets default values)."
Data Types and Constraints,2,What is the difference between CHAR and VARCHAR?,CHAR is fixed-length character data type that pads with spaces if the string is shorter than defined length. VARCHAR is variable-length character data type that only uses as much storage as needed for the actual string length.
Data Types and Constraints,3,What are the different data types in SQL?,"SQL data types include: Numeric (INT, DECIMAL, FLOAT, DOUBLE), String (CHAR, VARCHAR, TEXT), Date/Time (DATE, TIME, DATETIME, TIMESTAMP), Binary (BLOB, BINARY), Boolean (BOOLEAN), and others specific to different database systems."
Data Types and Constraints,4,What is the difference between Primary Key and Foreign Key?,"Primary Key uniquely identifies each row in a table, cannot be NULL, and there can be only one per table. Foreign Key is a field that references the primary key of another table, can be NULL, and there can be multiple foreign keys in a table."
Basic Query Operations,1,What is the SELECT statement?,"SELECT statement is used to query and retrieve data from one or more tables. It can specify columns to retrieve, apply filters with WHERE clause, sort results with ORDER BY, and group data with GROUP BY."
Basic Query Operations,2,What is the difference between WHERE and HAVING clauses?,"WHERE clause filters rows before grouping and is used with individual rows. HAVING clause filters groups after grouping and is used with aggregate functions. WHERE cannot use aggregate functions, but HAVING can."
Basic Query Operations,3,What are aggregate functions in SQL?,"Aggregate functions perform calculations on multiple rows and return a single value. Common ones include COUNT(), SUM(), AVG(), MAX(), MIN(). They are often used with GROUP BY clause."
Basic Query Operations,4,"What is the difference between COUNT(*), COUNT(1), and COUNT(column)?","COUNT(*) counts all rows including NULLs, COUNT(1) also counts all rows (equivalent to COUNT(*)), COUNT(column) counts only non-NULL values in the specified column."
Basic Query Operations,5,What is the difference between ORDER BY and GROUP BY?,"GROUP BY groups rows with same values into summary rows, often used with aggregate functions. ORDER BY sorts the result set by specified columns in ascending or descending order."
SQL Joins,1,What are SQL JOINs?,SQL JOINs are used to combine rows from two or more tables based on a related column between them. They allow retrieval of data from multiple tables in a single query.
SQL Joins,2,Explain different types of JOINs with examples,INNER JOIN: Returns records matching in both tables. LEFT JOIN: Returns all records from left table and matching from right. RIGHT JOIN: Returns all records from right table and matching from left. FULL OUTER JOIN: Returns all records when there's a match in either table. CROSS JOIN: Returns Cartesian product of both tables.
SQL Joins,3,What is the difference between INNER JOIN and LEFT JOIN?,"INNER JOIN returns only rows that have matching values in both tables. LEFT JOIN returns all rows from the left table and matching rows from the right table; if no match, NULL values are returned for right table columns."
SQL Joins,4,When would you use a SELF JOIN?,"SELF JOIN is used when you need to join a table with itself, typically for hierarchical data like employee-manager relationships, finding duplicate records, or comparing rows within the same table."
SQL Joins,5,What is a CROSS JOIN?,"CROSS JOIN returns the Cartesian product of two tables, meaning every row from the first table is combined with every row from the second table. It doesn't require a join condition and can result in very large result sets."
Subqueries and CTEs,1,What is a subquery in SQL?,"A subquery is a SQL query nested inside another SQL query. It can be used in SELECT, FROM, WHERE, or HAVING clauses to provide data to the main query. Subqueries can be correlated (reference outer query) or non-correlated."
Subqueries and CTEs,2,What are CTEs (Common Table Expressions)?,"CTEs are temporary named result sets that exist only during the execution of a SQL statement. They provide better readability than subqueries, can be referenced multiple times, and support recursive operations."
Subqueries and CTEs,3,What is the difference between subqueries and CTEs?,"CTEs are more readable, can be referenced multiple times in the same query, support recursion, and are defined at the beginning of the query. Subqueries are embedded within other queries but can only be referenced once and don't support recursion in most databases."
Subqueries and CTEs,4,What are correlated and non-correlated subqueries?,"Non-correlated subqueries are independent and execute once, returning results used by the outer query. Correlated subqueries reference columns from the outer query and execute once for each row processed by the outer query."
Subqueries and CTEs,5,How do recursive CTEs work?,"Recursive CTEs reference themselves and consist of two parts: anchor member (base case) and recursive member (references the CTE itself). They're useful for hierarchical data like organizational structures, bill of materials, or graph traversals."
Window Functions,1,What are window functions in SQL?,"Window functions perform calculations across a set of rows related to the current row without collapsing the result set. They use OVER() clause and include ranking functions (ROW_NUMBER, RANK, DENSE_RANK), aggregate functions, and analytic functions (LAG, LEAD)."
Window Functions,2,"What is the difference between ROW_NUMBER(), RANK(), and DENSE_RANK()?",ROW_NUMBER() assigns unique sequential integers. RANK() assigns same rank to tied values with gaps in sequence. DENSE_RANK() assigns same rank to tied values without gaps in sequence.
Window Functions,3,What are LAG() and LEAD() functions?,"LAG() accesses data from previous rows in the result set, while LEAD() accesses data from subsequent rows. Both allow you to compare current row values with values from other rows without self-joins."
Window Functions,4,What is PARTITION BY in window functions?,PARTITION BY divides the result set into partitions and applies the window function to each partition separately. It's similar to GROUP BY but doesn't collapse the result set into summary rows.
Window Functions,5,How do you find the Nth highest salary using window functions?,"Use DENSE_RANK() window function: SELECT salary FROM (SELECT salary, DENSE_RANK() OVER (ORDER BY salary DESC) as rank FROM employees) WHERE rank = N;"
Indexes and Performance,1,What is an index in SQL?,"An index is a database object that improves query performance by creating a separate structure that points to rows in a table. It speeds up SELECT operations but can slow down INSERT, UPDATE, and DELETE operations."
Indexes and Performance,2,What is the difference between clustered and non-clustered indexes?,Clustered index determines the physical order of data in a table (only one per table) and stores data pages in order of index key. Non-clustered index creates a separate structure pointing to data rows (multiple allowed per table).
Indexes and Performance,3,When should you create an index?,"Create indexes on columns frequently used in WHERE clauses, JOIN conditions, ORDER BY clauses, and columns with high selectivity. Avoid indexing frequently updated columns or tables with heavy INSERT/UPDATE operations."
Indexes and Performance,4,What is a composite index?,A composite index is an index on multiple columns. Column order matters - the index is most effective when queries filter on the leftmost columns. It can cover queries that use any prefix of the indexed columns.
Indexes and Performance,5,How do you analyze query performance?,"Use execution plans (EXPLAIN PLAN, EXPLAIN in PostgreSQL, Execution Plan in SQL Server) to analyze how queries are executed, identify table scans, expensive operations, and optimization opportunities."
Database Design and Normalization,1,What is normalization in database design?,"Normalization is the process of organizing data to minimize redundancy and dependency. It involves dividing larger tables into smaller, related tables and defining relationships between them to improve data integrity and reduce storage space."
Database Design and Normalization,2,What are the different normal forms?,"1NF: Eliminate duplicate columns, create separate tables for related data. 2NF: Meet 1NF and eliminate partial dependencies. 3NF: Meet 2NF and eliminate transitive dependencies. BCNF: Every determinant must be a candidate key."
Database Design and Normalization,3,What is denormalization and when would you use it?,"Denormalization deliberately introduces redundancy to improve query performance. It's used in data warehouses, reporting systems, or when read performance is more critical than storage space or update complexity."
Database Design and Normalization,4,What is the difference between star schema and snowflake schema?,"Star schema has a central fact table surrounded by denormalized dimension tables. Snowflake schema normalizes dimension tables into multiple related tables, creating a more complex structure but reducing redundancy."
Views and Stored Procedures,1,What is a view in SQL?,"A view is a virtual table based on the result of a SQL query. It contains rows and columns like a real table but doesn't store data physically. Views simplify complex queries, provide security by restricting data access, and present data in specific formats."
Views and Stored Procedures,2,What are the advantages of using views?,"Views provide security (hide sensitive columns), simplify complex queries, ensure data consistency, provide data independence, and can present aggregated or calculated data without modifying underlying tables."
Views and Stored Procedures,3,What is a stored procedure?,"A stored procedure is a precompiled collection of SQL statements stored in the database. It can accept parameters, perform complex logic, and return results. Benefits include better performance, code reusability, and centralized business logic."
Views and Stored Procedures,4,What is the difference between stored procedures and functions?,"Functions must return a value and can be used in SQL expressions, while procedures may or may not return values and cannot be used in expressions. Functions cannot perform DML operations in most databases, while procedures can."
Views and Stored Procedures,5,What are indexed views/materialized views?,"Indexed views (SQL Server) or materialized views (Oracle, PostgreSQL) physically store the result set and create indexes on them. They improve query performance but require maintenance when underlying data changes."
Triggers and Constraints,1,What is a trigger in SQL?,"A trigger is a special stored procedure that automatically executes (fires) when specific events occur in a database table or view, such as INSERT, UPDATE, or DELETE operations. Triggers cannot be called directly."
Triggers and Constraints,2,What are the types of triggers?,BEFORE triggers: Execute before the triggering event. AFTER triggers: Execute after the triggering event. INSTEAD OF triggers: Replace the triggering event (mainly for views). Row-level triggers: Fire for each affected row. Statement-level triggers: Fire once per SQL statement.
Triggers and Constraints,3,What are CHECK constraints?,"CHECK constraints ensure that values in a column satisfy a specific condition. They validate data before insertion or updates, helping maintain data integrity by enforcing business rules at the database level."
Triggers and Constraints,4,What is referential integrity?,Referential integrity ensures that relationships between tables remain consistent. Foreign key constraints enforce this by ensuring that foreign key values either match primary key values in the referenced table or are NULL.
Transactions and ACID Properties,1,What are ACID properties?,"ACID stands for: Atomicity (all-or-nothing execution), Consistency (valid state transitions), Isolation (concurrent transaction independence), and Durability (committed changes persist). These properties ensure reliable database transactions."
Transactions and ACID Properties,2,What is a database transaction?,A transaction is a logical unit of work consisting of one or more SQL operations that are executed as a single unit. Transactions ensure data consistency and integrity through ACID properties.
Transactions and ACID Properties,3,What are isolation levels in SQL?,"Isolation levels control how transactions interact: READ UNCOMMITTED (lowest isolation, allows dirty reads), READ COMMITTED (prevents dirty reads), REPEATABLE READ (prevents non-repeatable reads), SERIALIZABLE (highest isolation, prevents phantom reads)."
Transactions and ACID Properties,4,What is the difference between COMMIT and ROLLBACK?,COMMIT makes all changes in the current transaction permanent and visible to other transactions. ROLLBACK undoes all changes made in the current transaction and returns the database to its state before the transaction began.
Transactions and ACID Properties,5,What are deadlocks and how can you prevent them?,"Deadlocks occur when two or more transactions wait for each other to release locks. Prevention strategies include consistent lock ordering, keeping transactions short, using lower isolation levels when appropriate, and implementing timeout mechanisms."
Advanced SQL Concepts,1,How do you find duplicate records in a table?,"Use GROUP BY with HAVING COUNT(*) > 1: SELECT column1, column2, COUNT(*) FROM table GROUP BY column1, column2 HAVING COUNT(*) > 1; or use window functions with ROW_NUMBER()."
Advanced SQL Concepts,2,How do you delete duplicate records keeping only one?,"Use CTE with ROW_NUMBER(): WITH CTE AS (SELECT *, ROW_NUMBER() OVER (PARTITION BY column ORDER BY id) as rn FROM table) DELETE FROM CTE WHERE rn > 1;"
Advanced SQL Concepts,3,How do you find the second highest salary without using TOP/LIMIT?,Use subquery: SELECT MAX(salary) FROM employees WHERE salary < (SELECT MAX(salary) FROM employees); or use window functions with DENSE_RANK().
Advanced SQL Concepts,4,What is the difference between UNION and UNION ALL?,UNION combines results from multiple queries and removes duplicate rows. UNION ALL combines results and keeps all rows including duplicates. UNION ALL is faster as it doesn't need to check for duplicates.
Advanced SQL Concepts,5,What is a CASE statement?,"CASE statement provides conditional logic in SQL queries. It has two forms: Simple CASE (compares expression to values) and Searched CASE (evaluates boolean conditions). It can be used in SELECT, WHERE, ORDER BY clauses."
Performance Optimization,1,How do you optimize SQL query performance?,"Use appropriate indexes, avoid SELECT *, use WHERE clauses effectively, optimize JOINs, avoid functions in WHERE clauses, use LIMIT/TOP, analyze execution plans, update table statistics, and consider query rewriting."
Performance Optimization,2,What causes poor SQL performance?,"Common causes include missing indexes, inefficient queries, large result sets, unnecessary joins, functions in WHERE clauses, outdated statistics, blocking/locking issues, and inadequate hardware resources."
Performance Optimization,3,What is query execution plan?,"An execution plan shows how the database engine executes a query, including the order of operations, indexes used, join algorithms, and estimated costs. It's essential for performance tuning and optimization."
Performance Optimization,4,How do indexes affect DML operations?,"Indexes speed up SELECT operations but slow down INSERT, UPDATE, and DELETE operations because the database must maintain index structures when data changes. More indexes mean more maintenance overhead."
Performance Optimization,5,What is the difference between table scan and index seek?,Table scan reads every row in a table sequentially (expensive for large tables). Index seek uses an index to directly locate specific rows (much faster and more efficient).
Security and Best Practices,1,What is SQL injection and how can you prevent it?,"SQL injection is a security vulnerability where malicious SQL code is inserted into application queries. Prevention methods include using parameterized queries/prepared statements, input validation, stored procedures, and principle of least privilege."
Security and Best Practices,2,What are database roles and permissions?,"Database roles are collections of permissions that can be assigned to users. Common roles include db_owner, db_datareader, db_datawriter. Permissions control what operations users can perform on database objects."
Security and Best Practices,3,How do you implement row-level security?,"Row-level security can be implemented using views with WHERE clauses, stored procedures with parameter checks, or built-in row-level security features in modern databases like SQL Server or PostgreSQL."
Security and Best Practices,4,What is the principle of least privilege?,The principle of least privilege means granting users only the minimum permissions necessary to perform their job functions. This reduces security risks and potential for accidental data modification or deletion.
Real-world Scenarios,1,How would you handle a slowly changing dimension in a data warehouse?,"Use techniques like: Type 1 (overwrite old values), Type 2 (create new rows with version/date columns), or Type 3 (add columns for current and previous values). Choose based on business requirements for historical data."
Real-world Scenarios,2,How would you design a database for an e-commerce application?,"Key tables: Users, Products, Categories, Orders, Order_Items, Shopping_Cart, Payments, Reviews. Consider normalization, indexing on frequently queried columns, and scalability requirements for high-volume transactions."
Real-world Scenarios,3,How would you migrate data between databases?,"Steps include: analyzing source data, mapping data types, creating ETL processes, handling data transformation, testing with sample data, performing full migration during maintenance window, and validating results."
Real-world Scenarios,4,How would you handle database backup and recovery?,"Implement regular full backups, incremental/differential backups, transaction log backups, test restore procedures, maintain backup retention policies, and document recovery procedures for different failure scenarios."
Database-Specific Questions,1,What is the difference between MySQL and PostgreSQL?,"MySQL is known for speed and ease of use, better for web applications. PostgreSQL offers advanced features like arrays, custom data types, full-text search, better compliance with SQL standards, and stronger ACID compliance."
Database-Specific Questions,2,What are the key features of SQL Server?,"Key features include Integration Services (SSIS), Analysis Services (SSAS), Reporting Services (SSRS), Always On Availability Groups, columnstore indexes, and strong enterprise security features."
Database-Specific Questions,3,What is the difference between CAST and CONVERT functions?,"Both convert data types, but CONVERT is SQL Server-specific with more formatting options especially for dates. CAST is ANSI SQL standard and more portable across different database systems."
Database-Specific Questions,4,What are temporary tables and table variables?,"Temporary tables (#temp) are stored in tempdb, support indexes, and visible within session. Table variables (@table) are stored in memory, have limited functionality, and scope is limited to batch or procedure."
Complex Query Patterns,1,How do you write a query to find employees who earn more than their manager?,"SELECT e1.name, e1.salary FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.employee_id WHERE e1.salary > e2.salary;"
Complex Query Patterns,2,How do you find gaps in a sequence of numbers?,"WITH gaps AS (SELECT id + 1 AS gap_start FROM table t1 WHERE NOT EXISTS (SELECT 1 FROM table t2 WHERE t2.id = t1.id + 1)) SELECT gap_start, (SELECT MIN(id) - 1 FROM table WHERE id > gap_start) AS gap_end FROM gaps;"
Complex Query Patterns,3,How do you calculate running totals using window functions?,"SELECT date, amount, SUM(amount) OVER (ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total FROM transactions ORDER BY date;"
Complex Query Patterns,4,How do you find the top N records per group?,"SELECT * FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY category ORDER BY sales DESC) as rn FROM products) WHERE rn <= N;"
Complex Query Patterns,5,How do you write a query to find median value?,"SELECT AVG(salary) FROM (SELECT salary, ROW_NUMBER() OVER (ORDER BY salary) as rn, COUNT(*) OVER() as total FROM employees) WHERE rn IN ((total + 1) / 2, (total + 2) / 2);"
Date and Time Functions,1,How do you calculate age from date of birth?,"SELECT DATEDIFF(YEAR, date_of_birth, GETDATE()) - CASE WHEN DATEADD(YEAR, DATEDIFF(YEAR, date_of_birth, GETDATE()), date_of_birth) > GETDATE() THEN 1 ELSE 0 END AS age FROM employees;"
Date and Time Functions,2,How do you find records from the last 30 days?,"SELECT * FROM orders WHERE order_date >= DATEADD(DAY, -30, GETDATE()) AND order_date <= GETDATE();"
Date and Time Functions,3,How do you extract different parts of a date?,"SELECT YEAR(date_column) as year, MONTH(date_column) as month, DAY(date_column) as day, DATENAME(WEEKDAY, date_column) as day_name FROM table;"
Date and Time Functions,4,How do you find the first and last day of a month?,"SELECT DATEFROMPARTS(YEAR(GETDATE()), MONTH(GETDATE()), 1) as first_day, EOMONTH(GETDATE()) as last_day;"
Date and Time Functions,5,How do you calculate business days between two dates?,"SELECT DATEDIFF(DAY, @start_date, @end_date) - (DATEDIFF(WEEK, @start_date, @end_date) * 2) - CASE WHEN DATENAME(WEEKDAY, @start_date) = 'Sunday' THEN 1 ELSE 0 END - CASE WHEN DATENAME(WEEKDAY, @end_date) = 'Saturday' THEN 1 ELSE 0 END;"
String Functions and Text Processing,1,How do you concatenate strings in SQL?,"Use CONCAT() function: SELECT CONCAT(first_name, ' ', last_name) as full_name; or use || operator: SELECT first_name || ' ' || last_name; or use + in SQL Server: SELECT first_name + ' ' + last_name;"
String Functions and Text Processing,2,How do you find and replace text in SQL?,"Use REPLACE() function: SELECT REPLACE(column_name, 'old_text', 'new_text') FROM table; For pattern matching, use regular expressions where supported."
String Functions and Text Processing,3,How do you split a string into multiple columns?,"Use SUBSTRING() with CHARINDEX(): SELECT SUBSTRING(full_name, 1, CHARINDEX(' ', full_name) - 1) as first_name, SUBSTRING(full_name, CHARINDEX(' ', full_name) + 1, LEN(full_name)) as last_name;"
String Functions and Text Processing,4,How do you remove leading and trailing spaces?,Use TRIM() function: SELECT TRIM(column_name); or LTRIM(RTRIM(column_name)) in older SQL versions. Some databases also support TRIM(BOTH ' ' FROM column_name).
String Functions and Text Processing,5,How do you perform case-insensitive search?,Use LOWER() or UPPER(): WHERE LOWER(column) = LOWER('search_term'); or use COLLATE for specific collation: WHERE column COLLATE SQL_Latin1_General_CP1_CI_AS = 'search_term';
Advanced Joins and Set Operations,1,What is an anti-join and how do you implement it?,Anti-join finds records in one table that don't have matches in another. Implement using LEFT JOIN with NULL check: SELECT a.* FROM table1 a LEFT JOIN table2 b ON a.id = b.id WHERE b.id IS NULL;
Advanced Joins and Set Operations,2,How do you perform a full outer join in MySQL (which doesn't support it natively)?,Use UNION of LEFT JOIN and RIGHT JOIN: SELECT * FROM table1 LEFT JOIN table2 ON table1.id = table2.id UNION SELECT * FROM table1 RIGHT JOIN table2 ON table1.id = table2.id;
Advanced Joins and Set Operations,3,What is the difference between EXISTS and IN operators?,EXISTS returns TRUE/FALSE and is generally faster for large datasets as it stops at first match. IN compares values and can be slower with NULLs. EXISTS handles NULL values better than IN.
Advanced Joins and Set Operations,4,How do you use INTERSECT and EXCEPT operators?,INTERSECT returns common rows between two queries: SELECT col FROM table1 INTERSECT SELECT col FROM table2; EXCEPT returns rows from first query not in second: SELECT col FROM table1 EXCEPT SELECT col FROM table2;
Advanced Joins and Set Operations,5,When would you use a natural join?,"Natural join automatically joins tables on columns with same names. Use when tables have consistently named foreign keys, but it's generally avoided due to potential ambiguity and maintenance issues."
Data Warehousing and ETL,1,What is a fact table and dimension table?,"Fact table contains quantitative data (measures) and foreign keys to dimensions. Dimension table contains descriptive attributes. Fact tables are typically narrow and tall, dimensions are wide and short."
Data Warehousing and ETL,2,What is a slowly changing dimension (SCD) Type 2?,"SCD Type 2 preserves history by creating new records for changes. Each record has effective and end dates. Previous versions remain in the table with end dates, current version has NULL end date."
Data Warehousing and ETL,3,How do you implement CDC (Change Data Capture)?,"CDC can be implemented using triggers, log-based capture, or database-specific features. It tracks INSERT, UPDATE, DELETE operations to identify changed data for ETL processes."
Data Warehousing and ETL,4,What is data lineage and why is it important?,"Data lineage tracks the flow of data from source to destination, showing transformations applied. It's important for debugging, compliance, impact analysis, and understanding data quality issues."
Data Warehousing and ETL,5,How do you handle late-arriving data in data warehouses?,"Use techniques like: maintaining staging areas, implementing data quality checks, using surrogate keys with effective dates, and creating processes to backfill and reprocess data."
Advanced Performance Topics,1,What is query hint and when would you use it?,"Query hints force the optimizer to use specific execution plans or strategies. Use sparingly when you have proven that your approach is better than the optimizer's choice, typically for complex queries with known optimal paths."
Advanced Performance Topics,2,What is index fragmentation and how do you handle it?,Fragmentation occurs when data pages are not contiguous or when free space is distributed unevenly. Handle through index reorganization (for <30% fragmentation) or rebuild (for >30% fragmentation).
Advanced Performance Topics,3,What is partitioning and when should you use it?,"Partitioning divides large tables into smaller, manageable pieces. Use for very large tables (>1GB), to improve query performance, enable parallel processing, and facilitate maintenance operations."
Advanced Performance Topics,4,What is columnstore index and when is it beneficial?,"Columnstore indexes store data by columns rather than rows, highly compressed and optimized for analytical queries. Beneficial for data warehousing, reporting, and large table aggregations."
Advanced Performance Topics,5,How do you identify and resolve blocking/locking issues?,"Use system views like sys.dm_exec_requests, sys.dm_tran_locks to identify blocks. Resolve by optimizing queries, using appropriate isolation levels, implementing proper indexing, and keeping transactions short."
Modern SQL Features,1,How do you use JSON functions in SQL?,"Modern databases support JSON: JSON_EXTRACT() to get values, JSON_OBJECT() to create JSON, JSON_ARRAY() for arrays. Example: SELECT JSON_EXTRACT(json_column, '$.name') FROM table;"
Modern SQL Features,2,What are generated columns/computed columns?,Generated columns are computed from other columns using expressions. They can be VIRTUAL (computed on read) or STORED (computed on write). Example: ALTER TABLE ADD full_name AS (first_name || ' ' || last_name) STORED;
Modern SQL Features,3,How do you use window functions for percentiles?,Use PERCENTILE_CONT() or PERCENTILE_DISC(): SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY salary) OVER() as median_salary FROM employees;
Modern SQL Features,4,What is PIVOT and UNPIVOT?,"PIVOT rotates rows to columns, UNPIVOT does the opposite. PIVOT example: SELECT * FROM (SELECT year, quarter, sales FROM data) PIVOT (SUM(sales) FOR quarter IN ([Q1], [Q2], [Q3], [Q4]));"
Modern SQL Features,5,How do you use conditional aggregation?,"Use CASE with aggregate functions: SELECT SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) as active_count, COUNT(*) as total_count FROM users;"
Database Administration,1,How do you monitor database performance?,"Use performance counters, system views (sys.dm_exec_query_stats), execution plans, wait statistics, and tools like SQL Profiler, Extended Events, or database-specific monitoring tools."
Database Administration,2,What are database statistics and why are they important?,Statistics contain information about data distribution in columns and indexes. The query optimizer uses them to choose efficient execution plans. Outdated statistics can lead to poor performance.
Database Administration,3,How do you implement database maintenance plans?,"Include tasks like index maintenance, statistics updates, database backups, consistency checks (DBCC), and cleanup of old data. Schedule during low-activity periods and monitor execution."
Database Administration,4,What is database mirroring vs Always On Availability Groups?,"Database mirroring provides database-level failover between two servers. Always On provides instance-level failover with multiple replicas, load balancing for read operations, and better management capabilities."
Database Administration,5,How do you handle database growth and capacity planning?,"Monitor growth patterns, set up alerts for space usage, implement auto-growth settings, archive old data, and plan for hardware upgrades based on projected growth and performance requirements."
